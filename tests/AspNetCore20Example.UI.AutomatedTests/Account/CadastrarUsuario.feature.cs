// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AspNetCore20Example.UI.AutomatedTests.Account
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CadastrarUsuarioFeature : Xunit.IClassFixture<CadastrarUsuarioFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CadastrarUsuario.feature"
#line hidden
        
        public CadastrarUsuarioFeature(CadastrarUsuarioFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "Cadastrar Usuario", "\tUm usuário pode se cadastrar para poder \r\n\tgerenciar seus contatos.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Cadastrar Usuario com Sucesso")]
        [Xunit.TraitAttribute("FeatureTitle", "Cadastrar Usuario")]
        [Xunit.TraitAttribute("Description", "Cadastrar Usuario com Sucesso")]
        [Xunit.TraitAttribute("Category", "TestesAutomatizadosNovoUsuario")]
        public virtual void CadastrarUsuarioComSucesso()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cadastrar Usuario com Sucesso", new string[] {
                        "TestesAutomatizadosNovoUsuario"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("que o usuário está na tela inicial do site", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 9
 testRunner.And("clica no link para se registrar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Campo",
                        "Valor"});
            table1.AddRow(new string[] {
                        "nome",
                        "Usuario Teste"});
            table1.AddRow(new string[] {
                        "cpf",
                        "73565979003"});
            table1.AddRow(new string[] {
                        "email",
                        "teste@teste.com"});
            table1.AddRow(new string[] {
                        "senha",
                        "123@Qa"});
            table1.AddRow(new string[] {
                        "confirmarSenha",
                        "123@Qa"});
#line 10
 testRunner.And("preenche os campos com os valores", ((string)(null)), table1, "E ");
#line 17
 testRunner.When("clicar no botão Registrar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 18
 testRunner.Then("será registrado e será redirecionado com sucesso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Cadastrar Usuario com CPF já utilizado")]
        [Xunit.TraitAttribute("FeatureTitle", "Cadastrar Usuario")]
        [Xunit.TraitAttribute("Description", "Cadastrar Usuario com CPF já utilizado")]
        [Xunit.TraitAttribute("Category", "TestesAutomatizadosNovoUsuario")]
        public virtual void CadastrarUsuarioComCPFJaUtilizado()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cadastrar Usuario com CPF já utilizado", new string[] {
                        "TestesAutomatizadosNovoUsuario"});
#line 22
this.ScenarioSetup(scenarioInfo);
#line 23
 testRunner.Given("que o usuário está na tela inicial do site", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 24
 testRunner.And("clica no link para se registrar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Campo",
                        "Valor"});
            table2.AddRow(new string[] {
                        "nome",
                        "Usuario Teste  2"});
            table2.AddRow(new string[] {
                        "cpf",
                        "73565979003"});
            table2.AddRow(new string[] {
                        "email",
                        "teste2@teste.com"});
            table2.AddRow(new string[] {
                        "senha",
                        "123@Qa"});
            table2.AddRow(new string[] {
                        "confirmarSenha",
                        "123@Qa"});
#line 25
 testRunner.And("preenche os campos com os valores", ((string)(null)), table2, "E ");
#line 32
 testRunner.When("clicar no botão Registrar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 33
 testRunner.Then("Recebe uma mensagem de erro de CPF já cadastrado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Cadastrar Usuario com Email já utilizado")]
        [Xunit.TraitAttribute("FeatureTitle", "Cadastrar Usuario")]
        [Xunit.TraitAttribute("Description", "Cadastrar Usuario com Email já utilizado")]
        [Xunit.TraitAttribute("Category", "TestesAutomatizadosNovoUsuario")]
        public virtual void CadastrarUsuarioComEmailJaUtilizado()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cadastrar Usuario com Email já utilizado", new string[] {
                        "TestesAutomatizadosNovoUsuario"});
#line 37
this.ScenarioSetup(scenarioInfo);
#line 38
 testRunner.Given("que o usuário está na tela inicial do site", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 39
 testRunner.And("clica no link para se registrar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Campo",
                        "Valor"});
            table3.AddRow(new string[] {
                        "nome",
                        "Usuario Teste 3"});
            table3.AddRow(new string[] {
                        "cpf",
                        "10725033010"});
            table3.AddRow(new string[] {
                        "email",
                        "teste@teste.com"});
            table3.AddRow(new string[] {
                        "senha",
                        "123@Qa"});
            table3.AddRow(new string[] {
                        "confirmarSenha",
                        "123@Qa"});
#line 40
 testRunner.And("preenche os campos com os valores", ((string)(null)), table3, "E ");
#line 47
 testRunner.When("clicar no botão Registrar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 48
 testRunner.Then("recebe uma mensagem de erro de email já cadastrado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Cadastrar Usuario com Senha em tamanho inferior ao permitido")]
        [Xunit.TraitAttribute("FeatureTitle", "Cadastrar Usuario")]
        [Xunit.TraitAttribute("Description", "Cadastrar Usuario com Senha em tamanho inferior ao permitido")]
        [Xunit.TraitAttribute("Category", "TestesAutomatizadosNovoUsuario")]
        public virtual void CadastrarUsuarioComSenhaEmTamanhoInferiorAoPermitido()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cadastrar Usuario com Senha em tamanho inferior ao permitido", new string[] {
                        "TestesAutomatizadosNovoUsuario"});
#line 52
this.ScenarioSetup(scenarioInfo);
#line 53
 testRunner.Given("que o usuário está na tela inicial do site", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 54
 testRunner.And("clica no link para se registrar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Campo",
                        "Valor"});
            table4.AddRow(new string[] {
                        "nome",
                        "Usuario Teste 8"});
            table4.AddRow(new string[] {
                        "cpf",
                        "10725033010"});
            table4.AddRow(new string[] {
                        "email",
                        "teste2@teste.com"});
            table4.AddRow(new string[] {
                        "senha",
                        "3Qa"});
            table4.AddRow(new string[] {
                        "confirmarSenha",
                        "3Qa"});
#line 55
 testRunner.And("preenche os campos com os valores", ((string)(null)), table4, "E ");
#line 62
 testRunner.When("clicar no botão Registrar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 63
 testRunner.Then("Recebe uma mensagem de erro de que a senha esta em tamanho inferior ao permitido", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Cadastrar Usuario com Senha diferentes")]
        [Xunit.TraitAttribute("FeatureTitle", "Cadastrar Usuario")]
        [Xunit.TraitAttribute("Description", "Cadastrar Usuario com Senha diferentes")]
        [Xunit.TraitAttribute("Category", "TestesAutomatizadosNovoUsuario")]
        public virtual void CadastrarUsuarioComSenhaDiferentes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cadastrar Usuario com Senha diferentes", new string[] {
                        "TestesAutomatizadosNovoUsuario"});
#line 67
this.ScenarioSetup(scenarioInfo);
#line 68
 testRunner.Given("que o usuário está na tela inicial do site", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 69
 testRunner.And("clica no link para se registrar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Campo",
                        "Valor"});
            table5.AddRow(new string[] {
                        "nome",
                        "Usuario Teste 9"});
            table5.AddRow(new string[] {
                        "cpf",
                        "10725033010"});
            table5.AddRow(new string[] {
                        "email",
                        "teste2@teste.com"});
            table5.AddRow(new string[] {
                        "senha",
                        "123@Qa"});
            table5.AddRow(new string[] {
                        "confirmarSenha",
                        "123@Qb"});
#line 70
 testRunner.And("preenche os campos com os valores", ((string)(null)), table5, "E ");
#line 77
 testRunner.When("clicar no botão Registrar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 78
 testRunner.Then("Recebe uma mensagem de erro de que a senha estao diferentes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CadastrarUsuarioFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CadastrarUsuarioFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
